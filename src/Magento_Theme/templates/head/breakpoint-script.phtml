<?php
/**
 * Custom template
 */
    $bpConfig = json_encode($block->getVar('breakpoints', 'Magento_Theme'));
?>

<script data-defer-ignore="true">
    if (!window.breakpoint || typeof window.breakpoint !== 'object') {
        const bpConfig = JSON.parse('<?= /* @noEscape */ $bpConfig ?>');
        Object.keys(bpConfig).forEach((bp) => bpConfig[bp] = +bpConfig[bp]);

        const bpConfigEntries = Object.entries(bpConfig);
        const breakpointChangeEvent = new CustomEvent('breakpointChange', {detail: {}});

        window.breakpoint = {
            ...bpConfig,
            current: window.innerWidth
        };

        for (let i = 0; i < bpConfigEntries.length; i++) {
            let mq;
            if (i === 0) {
                mq = window.matchMedia(`screen and (max-width: ${bpConfigEntries[i+1][1] - 0.1}px)`);
            } else if (i === bpConfigEntries.length - 1) {
                mq = window.matchMedia(`screen and (min-width: ${bpConfigEntries[i][1]}px)`);
            } else {
                mq = window.matchMedia(`screen and (min-width: ${bpConfigEntries[i][1]}px) and (max-width: ${bpConfigEntries[i+1][1] - 0.1}px)`);
            }

            if (mq && mq.matches) {
                window.breakpoint.current = bpConfigEntries[i][1];
            }

            <?php
            /**
             * We trigger a custom event which passess current breakpoint
             * and a breakpoint name in the event detail object.
             * It can be listened to as follows:
             * document.addEventListener("breakpointChange", (event) => {
             *    // event.detail.breakpointName
             *    // event.detail.breakpoint
             * })
             */
            ?>

            const handleMqChange = () => {
                if (mq.matches) {
                    window.breakpoint.current = bpConfigEntries[i][1];
                    breakpointChangeEvent.detail.breakpointName = bpConfigEntries[i][0];
                    breakpointChangeEvent.detail.breakpoint= bpConfigEntries[i][1];

                    document.dispatchEvent(breakpointChangeEvent);
                }
            }

            if (mq && mq.addEventListener && typeof mq.addEventListener === 'function') {
                mq.addEventListener('change', handleMqChange);
            } else if (mq && mq.addListener && typeof mq.addListener === 'function') {
                <?php
                /* Compatibility for older Safari versions */
                ?>
                mq.addListener(handleMqChange);
            }
        }
    }
</script>
